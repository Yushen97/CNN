#include "fsm.h"
#include "adc.h"
#include "main.h"
#include "oled.h"
#include "display.h"
#include "tftdriver.h"
#include "algorithm.h"

uint8_t Current_state=0;
uint8_t Next_state=0;

const uint8_t State_menu=0;
const uint8_t State_inference=1;
const uint8_t State_training=2;

//*************algorithm****************//
extern uint8_t Epoch_Set;
extern uint8_t Epoch_cur;
extern uint8_t Infer_ID;

//**************display*****************//
extern int8_t Menu_num;
extern int8_t Inference_ID_pos;
extern int8_t Inference_ID_10;
extern int8_t Inference_ID_1;
extern int8_t Epoch_num_pos;
extern int8_t Epoch_num_10;
extern int8_t Epoch_num_1;
extern uint8_t Training_flag;
extern uint8_t Inference_flag;

//*************tftdrive****************//
extern float ADC3_output[8];


void State_show(uint8_t nxt){
	switch(nxt){
		case State_menu:{
			OLED_Menu(Menu_num);
		}break;
		case State_inference:{
			OLED_Inference();
		}break;
		case State_training:{
			OLED_Training();
		}break;
	}
	Current_state=Next_state;
}


void State_flip(uint16_t GPIO_Pin){
	
	switch(Current_state){
		
		case State_menu:{
			if(GPIO_Pin==B_UP_Pin){
				Menu_num-=1;
				if(Menu_num<1){Menu_num=2;}
			}
			else if(GPIO_Pin==B_DW_Pin){
				Menu_num+=1;
				if(Menu_num>2){Menu_num=1;}
			}
			else if(GPIO_Pin==B_OK_Pin){
				switch(Menu_num){
					case 1:{Next_state=State_inference;}break;
					case 2:{Next_state=State_training;}break;
				}
			}
			else if(GPIO_Pin==B_RT_Pin){
				Next_state=State_menu;
			}
		}break;
		
		
		case State_inference:{
			if(GPIO_Pin==B_UP_Pin){
				switch(Inference_ID_pos){
					case 1:{Inference_ID_10++;if(Inference_ID_10>9){Inference_ID_10=0;}}break;
					case 2:{Inference_ID_1++;if(Inference_ID_1>9){Inference_ID_1=0;}}break;
				}
			}
			else if(GPIO_Pin==B_DW_Pin){
				switch(Inference_ID_pos){
					case 1:{Inference_ID_10--;if(Inference_ID_10<0){Inference_ID_10=9;}}break;
					case 2:{Inference_ID_1--;if(Inference_ID_1<0){Inference_ID_1=9;}}break;
				}
			}
			else if(GPIO_Pin==B_OK_Pin){
				Inference_ID_pos++;
				if(Inference_ID_pos>2){Infer_ID = Inference_ID_10*10+Inference_ID_1; Inference_flag=1; Inference_ID_pos=3;}
			}
			else if(GPIO_Pin==B_RT_Pin){
				Inference_ID_pos--;
				if(Inference_ID_pos<1){Inference_ID_pos=1; Next_state=State_menu;}
			}		
		}break;
		
		
		case State_training:{
			if(GPIO_Pin==B_UP_Pin){
				switch(Epoch_num_pos){
					case 1:{Epoch_num_10++;if(Epoch_num_10>9){Epoch_num_10=0;}}break;
					case 2:{Epoch_num_1++;if(Epoch_num_1>9){Epoch_num_1=0;}}break;
				}
			}
			else if(GPIO_Pin==B_DW_Pin){
				switch(Epoch_num_pos){
					case 1:{Epoch_num_10--;if(Epoch_num_10<0){Epoch_num_10=9;}}break;
					case 2:{Epoch_num_1--;if(Epoch_num_1<0){Epoch_num_1=9;}}break;
				}
			}
			else if(GPIO_Pin==B_OK_Pin){
				Epoch_num_pos++;
				if(Epoch_num_pos>2){Epoch_Set = Epoch_num_10*10 + Epoch_num_1; Training_flag=1; Epoch_cur = 0; Epoch_num_pos=3;}
			}
			else if(GPIO_Pin==B_RT_Pin){
				Epoch_num_pos--;
				if(Epoch_num_pos<1){Epoch_num_pos=1; Next_state=State_menu;}
			}		
		}break;
				
	}
}

