#include "dac.h"
#include "adc.h"
#include "tim.h"
#include "main.h"
#include "stdio.h"
#include "tftdriver.h"

//*************data****************//
extern uint8_t Mnist[][28][28];
extern uint8_t Kernal_P[][3][3];
extern uint8_t Kernal_N[][3][3];
extern uint8_t Row;
extern uint8_t Col;
extern uint8_t Kernal_Size;

uint8_t  ADC_output_size=32;
uint16_t ADCP_output[32];
uint16_t ADCN_output[32];
int16_t  ADC_output[32];

//Basic chips or modules driver
//ADC read P/N, 0~4096 --> 0~3.3V
void ADC_Read(uint8_t P1N0){	      //Reading range:0~3.3V
	uint16_t ADC_Value;
	
	//Enable RD_MUX P0 or N0
	if(P1N0==1){EPRD0_Low();}
	else{ENRD0_Low();}
	
	for(uint8_t i=0; i<9; i++){
		HAL_ADC_Start(&hadc1);
		HAL_ADC_PollForConversion(&hadc1, 50);
		if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_REG_EOC)){
			RD_MUX(i);
			ADC_Value = HAL_ADC_GetValue(&hadc1);
		}
		if(i>0){
			if(P1N0==1){ADCP_output[i-1]=ADC_Value;}
			else			 {ADCN_output[i-1]=ADC_Value;}
		}
	}
	
	for(uint8_t i=8; i<17; i++){
		HAL_ADC_Start(&hadc1);
		HAL_ADC_PollForConversion(&hadc1, 50);
		if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_REG_EOC)){
			RD_MUX(i);
			ADC_Value = HAL_ADC_GetValue(&hadc1);
		}
		if(i>8){
			if(P1N0==1){ADCP_output[i-1]=ADC_Value;}
			else			 {ADCN_output[i-1]=ADC_Value;}
		}
	}
	
	//Disable RD_MUX P0 or N0
	if(P1N0==1){EPRD0_High();}
	else{ENRD0_High();}
	
	//Enable RD_MUX P1 or N1
	if(P1N0==1){EPRD1_Low();}
	else{ENRD1_Low();}
	
	for(uint8_t i=16; i<25; i++){
		HAL_ADC_Start(&hadc1);
		HAL_ADC_PollForConversion(&hadc1, 50);
		if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_REG_EOC)){
			RD_MUX(i);
			ADC_Value = HAL_ADC_GetValue(&hadc1);
		}
		if(i>16){
			if(P1N0==1){ADCP_output[i-1]=ADC_Value;}
			else			 {ADCN_output[i-1]=ADC_Value;}
		}
	}
	
	for(uint8_t i=24; i<33; i++){
		HAL_ADC_Start(&hadc1);
		HAL_ADC_PollForConversion(&hadc1, 50);
		if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_REG_EOC)){
			RD_MUX(i);
			ADC_Value = HAL_ADC_GetValue(&hadc1);
		}
		if(i>24){
			if(P1N0==1){ADCP_output[i-1]=ADC_Value;}
			else			 {ADCN_output[i-1]=ADC_Value;}
		}
	}
	
	//Disable RD_MUX P1 or N1
	if(P1N0==1){EPRD1_High();}
	else{ENRD1_High();}
}



//DAC_Write
void DAC_Write(uint8_t voltage){ //12bits 16*voltage
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1545+10*voltage);  // 0~255 >>> 1545(*100)~4095
	HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
	delay_us(1);
}

//IW_MUX
void IW_MUX(uint8_t num){ //delay_sec=1 for Data or weight input, delay_sec=2 for Kernal input
		GPIO_Write(IWA_GPIO_Port, IWA_Pin, num%2);
		GPIO_Write(IWB_GPIO_Port, IWB_Pin, num/2%2);
		GPIO_Write(IWC_GPIO_Port, IWC_Pin, num/4%2);
		GPIO_Write(IWD_GPIO_Port, IWD_Pin, num/8%2);
		if(num<16){
		EIW0_Low();
		delay_us(1);  //1us is needed for writing 0-->5V
		EIW0_High();
		}else{
		EIW1_Low();
		delay_us(1);
		EIW1_High();
		}
}	

//RD_MUX
void RD_MUX(uint8_t num){
		GPIO_Write(RDA_GPIO_Port, RDA_Pin, num%2);
		GPIO_Write(RDB_GPIO_Port, RDB_Pin, num/2%2);
		GPIO_Write(RDC_GPIO_Port, RDC_Pin, num/4%2);
		GPIO_Write(RDD_GPIO_Port, RDD_Pin, num/8%2);
}

//HV66PG driver //Low---Mid---High  1(0)010 ... 1010(31) 
void HV66PG_Write(uint8_t Ch, uint32_t data){
	//Transfering data to shift register
	for(uint8_t i=0; i<32; i++){
		if(Ch<4){GPIO_Write(I_DIN_GPIO_Port, I_DIN_Pin, data%2);}
		else{GPIO_Write(W_DIN_GPIO_Port, W_DIN_Pin, data%2);}
		
		delay_us(1);
		CLK_High();
		delay_us(1);
		CLK_Low();
		delay_us(1);
		data/=2;
	}
	
	//Transfering data from shift register to latch
	if(Ch<4){I_LE_High(); delay_us(1); I_LE_Low();}
	else{W_LE_High(); delay_us(1); W_LE_Low();}
	
	//Output == Scaning for 5us
	switch(Ch){
		case 0:{SI0_High();delay_us(2);SI0_Low();}break;
		case 1:{SI1_High();delay_us(2);SI1_Low();}break;
		case 2:{SI2_High();delay_us(2);SI2_Low();}break;
		case 3:{SI3_High();delay_us(2);SI3_Low();}break;
		case 4:{SP0_High();delay_us(2);SP0_Low();}break;
		case 5:{SN0_High();delay_us(2);SN0_Low();}break;
		case 6:{SP1_High();delay_us(2);SP1_Low();}break;
		case 7:{SN1_High();delay_us(2);SN1_Low();}break;
		case 8:{SP2_High();delay_us(2);SP2_Low();}break;
		case 9:{SN2_High();delay_us(2);SN2_Low();}break;
		case 10:{SP3_High();delay_us(2);SP3_Low();}break;
		case 11:{SN3_High();delay_us(2);SN3_Low();}break;
		default: break;
	}
}
//Computing element select
void CompCh_select(uint8_t Ch){
	switch(Ch){
		case 0:{VDDc0_High();delay_us(15);}break; //15us is fine.
		case 1:{VDDc1_High();delay_us(15);}break;
		case 2:{VDDc2_High();delay_us(15);}break;
		case 3:{VDDc3_High();delay_us(15);}break;
		default: break;
	}
	
	//ADC read
	ADC_Read(1);
	ADC_Read(0);
	Diff_ADC();
	
	//close Ch
	switch(Ch){
		case 0:{VDDc0_Low();}break;
		case 1:{VDDc1_Low();}break;
		case 2:{VDDc2_Low();}break;
		case 3:{VDDc3_Low();}break;
		default: break;
	}
}

//*****Futher functions*****//
//Data_input
void Data_input(uint8_t *pArray){	// 100us for 32 data
	for(uint8_t i=0;i<32;i++){
		DAC_Write(pArray[i]);	
		IW_MUX(i);
	}
}
//Kernel_input
void Kernel_input(uint8_t start_pin, uint8_t size, uint8_t *pArray){
	for(uint8_t i=0;i<size;i++){
		DAC_Write(pArray[i]);
		IW_MUX(i+start_pin);
	}
}
//*****Basic function*****//
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t i){
	(i==1) ? HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET)	:	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
}
//Diff_ADC
void Diff_ADC(void){	//Setting the negative value to zero.
	int16_t buff=0;
	for(uint8_t i=0;i<ADC_output_size;i++){
		buff=ADCN_output[i]-ADCP_output[i];
		if(buff>0){ADC_output[i]=buff;}
		else{ADC_output[i]=0;}
		//ADC_output[i]=buff;
	}
}
//ADC_Output_print
void ADC_Output_print(void){
	printf("************\n");
	for(uint8_t i=0;i<ADC_output_size;i++){
		printf("Channel %2d : %4d - %4d - %4d\n",i,ADCP_output[i], ADCN_output[i], ADC_output[i]);
	}
	printf("************\n");
}

